openapi: 3.0.1
info:
  title: Oracle WebCenter Content REST API
  version: v1.1
  description: Complete OpenAPI 3.0 specification covering all WebCenter Content v1.1
    REST endpoints.
servers:
- url: https://{host}/documents/wcc/api/{version}
  description: Base URL for WebCenter Content REST APIs
  variables:
    host:
      default: www.example.com
      description: Your WebCenter Content host name
    version:
      default: v1.1
security:
- BasicAuth: []
- BearerAuth: []
- ApiKeyAuth: []
tags:
- name: Files
  description: File operations upload, download, revisions, conversions, storage tiers,
    archive restores, work-in-progress, metadata, checkout, capabilities.
- name: Folders
  description: Folder operations create/delete folders & files, file links, folder
    search, capabilities.
- name: PublicLinks
  description: Public link management for files and folders.
- name: ApplicationLinks
  description: Application link management for folders.
- name: Search
  description: Global search across content.
- name: BackgroundJobs
  description: Bulk background job operations delete, download, category actions,
    cancel, status, package download.
- name: Taxonomies
  description: Taxonomy and category management.
- name: System
  description: System-level endpoints document profiles, data sources, document types,
    configuration & metadata info.
- name: Workflow
  description: Workflow management create, edit, approve, reject workflows.
- name: Attachments
  description: Attachment management for documents.
paths:
  /files/data:
    post:
      tags:
      - Files
      summary: Upload a new document
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadataValues:
                  type: string
                  description: JSON string containing document metadata
                primaryFile:
                  type: string
                  format: binary
                  description: The primary file to upload
                alternateFile:
                  type: string
                  format: binary
                  description: Optional alternate file (e.g., web viewable rendition)
              required:
              - metadataValues
              - primaryFile
      responses:
        '201':
          description: Document created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponse'
  /files/{dDocName}/data:
    get:
      tags:
      - Files
      summary: Download document content
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
          description: Specific version to download
      - name: rendition
        in: query
        schema:
          type: string
          enum:
          - primary
          - alternate
          - web
          - rendition:T
          description: Type of rendition to download
      - name: Range
        in: header
        schema:
          type: string
          description: Range header for partial content requests
      responses:
        '200':
          description: Full content stream
          content:
            application/octet-stream: {}
        '206':
          description: Partial content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '416':
          description: Range Not Satisfiable
        '500':
          description: Server error
    post:
      tags:
      - Files
      summary: Upload a new revision
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadataValues:
                  type: string
                  description: JSON string containing document metadata
                primaryFile:
                  type: string
                  format: binary
                  description: The primary file to upload
                alternateFile:
                  type: string
                  format: binary
                  description: Optional alternate file (e.g., web viewable rendition)
              required:
              - metadataValues
              - primaryFile
      responses:
        '201':
          description: Revision created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /files/.by.did/{dID}/data:
    get:
      tags:
      - Files
      summary: Download by revision ID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      - name: rendition
        in: query
        schema:
          type: string
          enum:
          - primary
          - alternate
          - web
          - rendition:T
      - name: Range
        in: header
        schema:
          type: string
      responses:
        '200':
          description: Full content stream
        '206':
          description: Partial content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '416':
          description: Range Not Satisfiable
        '500':
          description: Server error
  /files/{dDocName}/resubmitConversion:
    post:
      tags:
      - Files
      summary: Resubmit failed conversion
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
      - name: alwaysResubmit
        in: query
        schema:
          type: boolean
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '409':
          description: Conflict
        '500':
          description: Server error
  /files/.by.did/{dID}/resubmitConversion:
    post:
      tags:
      - Files
      summary: Resubmit failed conversion by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '409':
          description: Conflict
        '500':
          description: Server error
  /files/{dDocName}/storage/.updateStorageTier:
    post:
      tags:
      - Files
      summary: Change storage tier
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: storageTier
        in: query
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Server error
  /files/.by.did/{dID}/storage/.updateStorageTier:
    post:
      tags:
      - Files
      summary: Change storage tier by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      - name: storageTier
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Server error
  /files/{dDocName}/storage/.restoreFromArchive:
    post:
      tags:
      - Files
      summary: Restore from archive
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
      - name: hours
        in: query
        schema:
          type: integer
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Server error
  /files/.by.did/{dID}/storage/.restoreFromArchive:
    post:
      tags:
      - Files
      summary: Restore from archive by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      - name: hours
        in: query
        schema:
          type: integer
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Server error
  /files/workInProgress/items:
    get:
      tags:
      - Files
      summary: List work in progress
      parameters:
      - name: fields
        in: query
        schema:
          type: string
      - name: orderBy
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: WIP list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkInProgressResponse'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /files/{dDocName}:
    get:
      tags:
      - Files
      summary: Get document information
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
        description: Document name
      - name: fields
        in: query
        required: false
        schema:
          type: string
        description: Comma-separated list of fields to return
      responses:
        '200':
          description: Document information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  dDocName:
                    type: string
                  dDocTitle:
                    type: string
                  dID:
                    type: string
                  dRevLabel:
                    type: string
                  dDocType:
                    type: string
                  dSecurityGroup:
                    type: string
                  dDocAccount:
                    type: string
                  dDocAuthor:
                    type: string
                  dCreateDate:
                    type: string
                    format: date-time
                  dInDate:
                    type: string
                    format: date-time
                  dFormat:
                    type: string
                  dFileSize:
                    type: integer
                  dStatus:
                    type: string
                additionalProperties: true
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    put:
      tags:
      - Files
      summary: Update document metadata/file
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
      - name: createPrimaryMetaFile
        in: query
        schema:
          type: boolean
      - name: createAlternateMetaFile
        in: query
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataChangeObjectParameter'
      responses:
        '204':
          description: Document updated successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    delete:
      tags:
      - Files
      summary: Delete document
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
      responses:
        '204':
          description: Document deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /files/.by.did/{dID}:
    get:
      tags:
      - Files
      summary: Get document information by revision ID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
        description: Document revision ID
      - name: fields
        in: query
        required: false
        schema:
          type: string
        description: Comma-separated list of fields to return
      responses:
        '200':
          description: Document information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  dDocName:
                    type: string
                  dDocTitle:
                    type: string
                  dID:
                    type: string
                  dRevLabel:
                    type: string
                  dDocType:
                    type: string
                  dSecurityGroup:
                    type: string
                  dDocAccount:
                    type: string
                  dDocAuthor:
                    type: string
                  dCreateDate:
                    type: string
                    format: date-time
                  dInDate:
                    type: string
                    format: date-time
                  dFormat:
                    type: string
                  dFileSize:
                    type: integer
                  dStatus:
                    type: string
                additionalProperties: true
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    put:
      tags:
      - Files
      summary: Update by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      - name: createPrimaryMetaFile
        in: query
        schema:
          type: boolean
      - name: createAlternateMetaFile
        in: query
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataChangeObjectParameter'
      responses:
        '204':
          description: Document updated successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    delete:
      tags:
      - Files
      summary: Delete document revision by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      responses:
        '204': &id004
          description: No Content
        '400': &id001
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponse'
        '401': &id002
          description: Unauthorized
        '500': &id003
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponse'
  /files/{dDocName}/versions:
    get:
      tags:
      - Files
      summary: Get document versions
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
        description: Document name
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 50
        description: Maximum number of versions to return
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          default: 0
        description: Pagination offset
      responses:
        '200':
          description: Document versions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        dID:
                          type: string
                        dRevLabel:
                          type: string
                        dRevisionID:
                          type: string
                        dDocName:
                          type: string
                        dDocTitle:
                          type: string
                        dDocAuthor:
                          type: string
                        dInDate:
                          type: string
                          format: date-time
                        dCreateDate:
                          type: string
                          format: date-time
                        dStatus:
                          type: string
                        dFormat:
                          type: string
                        dFileSize:
                          type: integer
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /files/{dDocName}/.checkout:
    post:
      tags:
      - Files
      summary: Checkout a document
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /files/{dDocName}/.undocheckout:
    post:
      tags:
      - Files
      summary: Reverse checkout
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /files/{dDocName}/capabilities:
    get:
      tags:
      - Files
      summary: Test document capabilities
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: testedCapabilities
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Capabilities result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilitiesResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /folders/{fFolderGUID}:
    get:
      tags:
      - Folders
      summary: Retrieve folder info
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Folder info
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    delete:
      tags:
      - Folders
      summary: Delete a folder
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /folders/files/{fFileGUID}:
    get:
      tags:
      - Folders
      summary: Get file info in folder
      parameters:
      - name: fFileGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: File info
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    delete:
      tags:
      - Folders
      summary: Delete file in folder
      parameters:
      - name: fFileGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /folders/search/items:
    get:
      tags:
      - Folders
      summary: Search within folders
      parameters:
      - name: fFolderGUID
        in: query
        required: true
        schema:
          type: string
      - name: whereClause
        in: query
        schema:
          type: string
      - name: orderBy
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /folders/{fFolderGUID}/{dDocName}/filelinks:
    post:
      tags:
      - Folders
      summary: Create file link
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: fFileType
        in: query
        schema:
          type: string
      - name: ConflictResolutionMethod
        in: query
        schema:
          type: string
      responses:
        '201':
          description: Link created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict
        '500':
          description: Server error
  /folders/{fFolderGUID}/capabilities:
    get:
      tags:
      - Folders
      summary: Test folder capabilities
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
      - name: testedCapabilities
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Capabilities result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilitiesResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /folders/files/{fFileGUID}/data:
    get:
      tags:
      - Folders
      summary: Download file from folder
      parameters:
      - name: fFileGUID
        in: path
        required: true
        schema:
          type: string
        description: File GUID to download
      - name: RevisionSelectionMethod
        in: query
        required: false
        schema:
          type: string
          enum:
          - Latest
          - LatestReleased
          - Specific
          default: Latest
        description: Revision selection method
      - name: dRevLabel
        in: query
        required: false
        schema:
          type: string
        description: Specific revision label (when RevisionSelectionMethod is Specific)
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /publiclinks/.by.file/{fFileGUID}:
    post:
      tags:
      - PublicLinks
      summary: Create public link for file
      parameters:
      - name: fFileGUID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicLinkObject'
      responses:
        '201':
          description: Public link created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    get:
      tags:
      - PublicLinks
      summary: List public links for file
      parameters:
      - name: fFileGUID
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: integer
      - name: limit
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: List of public links
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicLinkListResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /publiclinks/.by.folder/{fFolderGUID}:
    post:
      tags:
      - PublicLinks
      summary: Create public link for folder
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicLinkObject'
      responses:
        '201':
          description: Public link created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    get:
      tags:
      - PublicLinks
      summary: List public links for folder
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: integer
      - name: limit
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: List of public links
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicLinkListResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /publiclinks/{dLinkID}:
    get:
      tags:
      - PublicLinks
      summary: Get public link info
      parameters:
      - name: dLinkID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Public link info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicLinkResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    put:
      tags:
      - PublicLinks
      summary: Update public link
      parameters:
      - name: dLinkID
        in: path
        required: true
        schema:
          type: string
        description: Public link ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicLinkObject'
      responses:
        '204':
          description: Public link updated successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    delete:
      tags:
      - PublicLinks
      summary: Delete public link
      parameters:
      - name: dLinkID
        in: path
        required: true
        schema:
          type: string
        description: Public link ID to delete
      responses:
        '204':
          description: Public link deleted successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /applinks/.by.file/{fFileGUID}:
    post:
      tags:
      - ApplicationLinks
      summary: Create application link to file
      parameters:
      - name: fFileGUID
        in: path
        required: true
        schema:
          type: string
        description: File GUID to create application link for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationLinkObject'
      responses:
        '201':
          description: Application link created successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /applinks/.by.folder/{fFolderGUID}:
    post:
      tags:
      - ApplicationLinks
      summary: Create application link to folder
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
        description: Folder GUID to create application link for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationLinkObject'
      responses:
        '201':
          description: Application link created successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /applinks/{dAppLinkID}/.refreshAccessToken:
    post:
      tags:
      - ApplicationLinks
      summary: Refresh applink access token
      parameters:
      - name: dAppLinkID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppLinkRefreshObject'
      responses:
        '201':
          description: Token refreshed
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /files/search/items:
    get:
      tags:
      - Search
      summary: Search documents
      parameters:
      - name: q
        in: query
        schema:
          type: string
          description: Search query
      - name: fields
        in: query
        schema:
          type: string
          description: Comma-separated list of fields to return
      - name: orderBy
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /.bulk/.delete:
    post:
      tags:
      - BackgroundJobs
      summary: Start bulk delete job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackgroundJobRequestObject'
      responses:
        '202':
          description: Job started
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /.bulk/.download:
    post:
      tags:
      - BackgroundJobs
      summary: Start bulk download job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackgroundJobRequestObject'
      responses:
        '202':
          description: Job started
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /.bulk/categories/.add:
    post:
      tags:
      - BackgroundJobs
      summary: Start bulk add category job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackgroundCategoryActionRequestObject'
      responses:
        '202':
          description: Job started
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /.bulk/categories/.remove:
    post:
      tags:
      - BackgroundJobs
      summary: Start bulk remove category job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackgroundCategoryActionRequestObject'
      responses:
        '202':
          description: Job started
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /.bulk/categories/.copy:
    post:
      tags:
      - BackgroundJobs
      summary: Start bulk copy category job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceCategoryGUID:
                  type: string
                  description: Source category GUID
                targetCategoryGUID:
                  type: string
                  description: Target category GUID
                includeSubcategories:
                  type: boolean
                  default: false
                  description: Include subcategories in copy
                conflictResolution:
                  type: string
                  enum:
                  - skip
                  - overwrite
                  - rename
                  default: skip
                  description: How to handle conflicts
              required:
              - sourceCategoryGUID
              - targetCategoryGUID
      responses:
        '202':
          description: Copy category job started
          content:
            application/json:
              schema:
                type: object
                properties:
                  dJobID:
                    type: string
                    description: Job ID for tracking
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /.bulk/{dJobID}/.cancel:
    post:
      tags:
      - BackgroundJobs
      summary: Cancel a background job
      parameters:
      - name: dJobID
        in: path
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Canceled request sent
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Server error
  /.bulk/{dJobID}:
    get:
      tags:
      - BackgroundJobs
      summary: Get status of a background job
      parameters:
      - name: dJobID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundJobStatus'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Server error
  /.bulk/{dJobID}/package:
    get:
      tags:
      - BackgroundJobs
      summary: Download background job result file
      parameters:
      - name: dJobID
        in: path
        required: true
        schema:
          type: string
        description: Job ID
      responses:
        '200':
          description: Background job result file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /taxonomies/{dTaxonomyGUID}:
    get:
      tags:
      - Taxonomies
      summary: Get a taxonomy
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Taxonomy info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyCreateObject'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    put:
      tags:
      - Taxonomies
      summary: Update a taxonomy
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxonomyUpdateObject'
      responses:
        '204':
          description: Taxonomy updated successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    delete:
      tags:
      - Taxonomies
      summary: Delete a taxonomy
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
        description: Taxonomy GUID to delete
      responses:
        '204':
          description: Taxonomy deleted successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /taxonomies/{dTaxonomyGUID}/categories/{dCategoryGUID}/.copy:
    post:
      tags:
      - Taxonomies
      summary: Copy a category
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
        description: Source taxonomy GUID
      - name: dCategoryGUID
        in: path
        required: true
        schema:
          type: string
        description: Source category GUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetTaxonomyGUID:
                  type: string
                  description: Target taxonomy GUID
                targetParentCategoryGUID:
                  type: string
                  description: Target parent category GUID (optional)
                includeSubcategories:
                  type: boolean
                  default: false
              required:
              - targetTaxonomyGUID
      responses:
        '201':
          description: Category copied successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /system/ping:
    get:
      tags:
      - System
      summary: PING server health check
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
        '500':
          description: Server error
  /system/docProfiles:
    get:
      tags:
      - System
      summary: Get all document profiles information
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 50
        description: Maximum number of results
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          default: 0
        description: Pagination offset
      responses:
        '200':
          description: List of document profiles
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                  profiles:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocProfileResponse'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    post:
      tags:
      - System
      summary: Create document profile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: true
      responses:
        '201':
          description: Document profile created successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /system/docProfiles/{dpName}:
    get:
      tags:
      - System
      summary: Get document profile
      parameters:
      - name: dpName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocProfileResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    put:
      tags:
      - System
      summary: Update document profile
      parameters:
      - name: dpName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: true
      responses:
        '204':
          description: Updated
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    delete:
      tags:
      - System
      summary: Delete document profile
      parameters:
      - name: dpName
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /system/{dataSource}/items:
    get:
      tags:
      - System
      summary: Query data source
      parameters:
      - name: dataSource
        in: path
        required: true
        schema:
          type: string
      - name: whereClause
        in: query
        schema:
          type: string
      - name: orderClause
        in: query
        schema:
          type: string
      - name: maxRows
        in: query
        schema:
          type: integer
      - name: startRow
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /system/doctypes:
    get:
      tags:
      - System
      summary: List document types
      responses:
        '200':
          description: Doc types list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocTypeResponse'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    post:
      tags:
      - System
      summary: Create document type
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /system/doctypes/{dDocType}:
    put:
      tags:
      - System
      summary: Update document type
      parameters:
      - name: dDocType
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: true
      responses:
        '204':
          description: Updated
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    delete:
      tags:
      - System
      summary: Delete document type
      parameters:
      - name: dDocType
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /system/docConfigInfo:
    get:
      tags:
      - System
      summary: Get configuration info
      parameters:
      - name: rowLimit
        in: query
        schema:
          type: integer
      - name: includeResultSets
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Configuration info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocConfigInfoResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /system/docMetaInfo:
    get:
      tags:
      - System
      summary: Get metadata fields info
      responses:
        '200':
          description: Metadata info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocMetaInfoResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /workflow:
    post:
      tags:
      - Workflow
      summary: Create a new workflow
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                dWfName:
                  type: string
                  description: Workflow name
                dWfType:
                  type: string
                  description: Workflow type
                dWfDescription:
                  type: string
                  description: Workflow description
                dSecurityGroup:
                  type: string
                  description: Security group for the workflow
                dWfCriteriaName:
                  type: string
                  description: Criteria name (conditional)
                dWfCriteriaValue:
                  type: string
                  description: Criteria value (conditional)
              required:
              - dWfName
              - dWfType
              - dWfDescription
              - dSecurityGroup
      responses:
        '201':
          description: Workflow created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /workflows/{dWfName}:
    get:
      tags:
      - Workflow
      summary: Get workflow information
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Workflow information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    put:
      tags:
      - Workflow
      summary: Edit workflow
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowUpdateRequest'
      responses:
        '204':
          description: Workflow updated
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    delete:
      tags:
      - Workflow
      summary: Delete a workflow definition
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
        description: Name of the workflow to delete
      responses:
        '204':
          description: Workflow deleted successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /files/{dDocName}/workflow/.approve:
    post:
      tags:
      - Workflow
      summary: Approve workflow for document
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
        description: dDocName of the document in workflow
      responses:
        '204':
          description: Workflow approved
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /files/{dDocName}/workflow/.reject:
    post:
      tags:
      - Workflow
      summary: Reject workflow for document
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
        description: dDocName of the document in workflow
      - name: rejectMessage
        in: query
        required: false
        schema:
          type: string
        description: The rejection message
      responses:
        '204':
          description: Workflow rejected
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /workflows/{dWfName}/.start:
    post:
      tags:
      - Workflow
      summary: Start a workflow instance
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
        description: Name of the workflow to start
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dDocName:
                  type: string
                  description: Document name to associate with workflow
                dWfUserList:
                  type: string
                  description: Comma-separated list of users
                dWfInitialPriority:
                  type: string
                  description: Initial priority level
                dWfStartDate:
                  type: string
                  format: date-time
                  description: Workflow start date
                dWfDueDate:
                  type: string
                  format: date-time
                  description: Workflow due date
              required:
              - dDocName
      responses:
        '201':
          description: Workflow started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /workflows/{dWfName}/.cancel:
    post:
      tags:
      - Workflow
      summary: Cancel a workflow instance
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
        description: Name of the workflow to cancel
      - name: dDocName
        in: query
        required: true
        schema:
          type: string
        description: Document name associated with the workflow
      responses:
        '204':
          description: Workflow cancelled successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /files/{dDocName}/attachments/data:
    post:
      tags:
      - Attachments
      summary: Add attachment to document
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                extRenditionName:
                  type: string
                  description: External rendition name (required)
                extRenditionDescription:
                  type: string
                  description: External rendition description (optional)
                extRenditionFile:
                  type: string
                  format: binary
                  description: Attachment file (required)
                version:
                  type: string
                  description: Version (optional)
              required:
              - extRenditionName
              - extRenditionFile
      responses:
        '201':
          description: Attachment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /files/{dDocName}/attachments/:
    get:
      tags:
      - Attachments
      summary: List attachments for document
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Attachment list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentListResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /generic/invoke:
    get:
      tags:
      - System
      summary: Generic GET API for IdcService calls
      description: Execute any Oracle WebCenter Content IdcService using HTTP GET
        method. Many other parameters are supported depending on the IdcService being
        invoked.
      parameters:
      - name: IdcService
        in: query
        required: true
        schema:
          type: string
        description: The IdcService to invoke (e.g., PING_SERVER, GET_SEARCH_RESULTS,
          DOC_INFO)
      - name: idcToken
        in: query
        required: false
        schema:
          type: string
        description: The unique token required when invoking non-scriptable IdcServices
      - name: OnErrorReturnBinder
        in: query
        required: false
        schema:
          type: boolean
        description: When false, any error is returned as a GeneralErrorResponse;
          By default, the service binder is returned
      - name: IsJson
        in: query
        required: false
        schema:
          type: boolean
        description: When true, the response is returned in a HDA-JSON format; By
          default, the response is created by converting the service binder to JSON
      responses:
        '200':
          description: Service executed successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                description: Service response varies by IdcService
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Service not found
        '500':
          description: Server error
    post:
      tags:
      - System
      summary: Generic POST API for IdcService calls
      description: Execute any Oracle WebCenter Content IdcService using HTTP POST
        method. Many other parameters are supported depending on the IdcService being
        invoked.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - IdcService
              properties:
                IdcService:
                  type: string
                  description: The IdcService to invoke (e.g., PING_SERVER, CHECKIN_UNIVERSAL,
                    UPDATE_DOCINFO)
                primaryFile:
                  type: string
                  format: binary
                  description: The primary file for this document
                alternateFile:
                  type: string
                  format: binary
                  description: The alternate file for this document
                idcToken:
                  type: string
                  description: The unique token required when invoking non-scriptable
                    IdcServices
                OnErrorReturnBinder:
                  type: boolean
                  description: When false, any error is returned as a GeneralErrorResponse;
                    By default, the service binder is returned
                IsJson:
                  type: boolean
                  description: When true, the response is returned in a HDA-JSON format;
                    By default, the response is created by converting the service
                    binder to JSON
              additionalProperties: true
      responses:
        '200':
          description: Service executed successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                description: Service response varies by IdcService
        '201':
          description: Resource created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Service not found
        '500':
          description: Server error
  /folders/browse/{fFolderGUID}:
    get:
      tags:
      - Folders
      summary: Browse folder contents
      parameters:
      - name: fFolderGUID
        in: path
        required: true
        schema:
          type: string
        description: Folder GUID to browse
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 50
        description: Maximum number of items to return
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          default: 0
        description: Pagination offset
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
        description: Sort order specification
      - name: includeSubfolders
        in: query
        required: false
        schema:
          type: boolean
          default: false
        description: Include items from subfolders
      responses:
        '200':
          description: Folder contents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        fFolderGUID:
                          type: string
                        fFolderName:
                          type: string
                        fFileGUID:
                          type: string
                        dDocName:
                          type: string
                        dDocTitle:
                          type: string
                        type:
                          type: string
                          enum:
                          - folder
                          - file
                        dFileSize:
                          type: integer
                        dCreateDate:
                          type: string
                          format: date-time
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /pages/displayFields:
    get:
      tags:
      - System
      summary: Get custom fields information
      parameters:
      - name: dDocType
        in: query
        required: false
        schema:
          type: string
        description: Filter by document type
      responses:
        '200':
          description: Custom fields information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customFields:
                    type: array
                    items:
                      type: object
                      properties:
                        fieldName:
                          type: string
                        fieldLabel:
                          type: string
                        fieldType:
                          type: string
                          enum:
                          - text
                          - memo
                          - int
                          - date
                          - option_list
                        isRequired:
                          type: boolean
                        defaultValue:
                          type: string
                        optionList:
                          type: array
                          items:
                            type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /users/permissions:
    get:
      tags:
      - System
      summary: Get permission information
      parameters:
      - name: entityType
        in: query
        required: false
        schema:
          type: string
          enum:
          - document
          - folder
          - taxonomy
          - workflow
        description: Type of entity to get permissions for
      - name: entityId
        in: query
        required: false
        schema:
          type: string
        description: Entity ID
      responses:
        '200':
          description: Permission information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        dSecurityGroup:
                          type: string
                        dUserName:
                          type: string
                        permissionType:
                          type: string
                          enum:
                          - read
                          - write
                          - delete
                          - admin
                        entityType:
                          type: string
                        entityId:
                          type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /users/token:
    post:
      tags:
      - System
      summary: Get OAuth access token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                  - client_credentials
                  - password
                  - authorization_code
                  - refresh_token
                  description: OAuth grant type
                client_id:
                  type: string
                  description: Client ID
                client_secret:
                  type: string
                  description: Client secret
                username:
                  type: string
                  description: Username (for password grant)
                password:
                  type: string
                  description: Password (for password grant)
                refresh_token:
                  type: string
                  description: Refresh token (for refresh_token grant)
                code:
                  type: string
                  description: Authorization code (for authorization_code grant)
                scope:
                  type: string
                  description: OAuth scope
              required:
              - grant_type
              - client_id
              - client_secret
      responses:
        '200':
          description: OAuth token retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: OAuth access token
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    description: Token expiration in seconds
                  refresh_token:
                    type: string
                    description: Refresh token (if applicable)
                  scope:
                    type: string
                    description: Granted scope
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /workflows/{dWfName}/docrevisions:
    get:
      tags:
      - Workflow
      summary: Get workflow revisions
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
        description: Name of the workflow
      responses:
        '200':
          description: Workflow revisions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  revisions:
                    type: array
                    items:
                      type: object
                      properties:
                        dWfRevisionID:
                          type: string
                        dWfRevisionDate:
                          type: string
                          format: date-time
                        dWfRevisionAuthor:
                          type: string
                        dWfRevisionComments:
                          type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /workflows/{dWfName}/files/{dDocName}:
    delete:
      tags:
      - Workflow
      summary: Remove document from workflow
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
        description: Name of the workflow
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
        description: Document name to remove
      responses:
        '204':
          description: Document removed successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
    post:
      tags:
      - Workflow
      summary: Add document to workflow
      description: Add a document to a workflow. (WF_ADD_DOC)
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200': &id006
          description: Success
        '400': *id001
        '401': *id002
        '500': *id003
  /files/files/{dDocName}/attachments/{extRenditionName}:
    delete:
      tags:
      - Attachments
      summary: Delete attachment from document
      description: Delete an attachment from a document. Note the double /files/ in
        path is correct per Oracle documentation.
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: extRenditionName
        in: path
        required: true
        schema:
          type: string
      responses:
        '204': *id004
        '400': *id001
        '401': *id002
        '500': *id003
  /files/files/.by.did/{dID}/attachments/{extRenditionName}:
    delete:
      tags:
      - Attachments
      summary: Delete attachment from document by dID
      description: Delete an attachment from a document by dID. Note the double /files/
        in path is correct per Oracle documentation.
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      - name: extRenditionName
        in: path
        required: true
        schema:
          type: string
      responses:
        '204': *id004
        '400': *id001
        '401': *id002
        '500': *id003
  /files/.by.did/{dID}/capabilities:
    get:
      tags:
      - Files
      summary: Get document capabilities by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Document capabilities
        '400': *id001
        '401': *id002
        '500': *id003
  /files/.by.did/{dID}/attachments/:
    get:
      tags:
      - Attachments
      summary: List attachments for document by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: List of attachments
        '400': *id001
        '401': *id002
        '500': *id003
  /files/.by.did/{dID}/attachments/{extRenditionName}/data/:
    get:
      tags:
      - Attachments
      summary: Download attachment by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      - name: extRenditionName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Attachment file content
        '400': *id001
        '401': *id002
        '404': &id005
          description: Not Found
        '500': *id003
  /files/{dDocName}/attachments/{extRenditionName}/data/:
    get:
      tags:
      - Attachments
      summary: Download attachment
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: extRenditionName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Attachment file content
        '400': *id001
        '401': *id002
        '404': *id005
        '500': *id003
  /files/{dDocName}/taxonomies:
    get:
      tags:
      - Files
      summary: Get taxonomies for document
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Document taxonomies
        '400': *id001
        '401': *id002
        '500': *id003
  /files/{dDocName}/workflow:
    get:
      tags:
      - Workflow
      summary: Get workflow information for document
      description: Get workflow information for a content item. (GET_WORKFLOW_INFO)
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Workflow information
        '400': *id001
        '401': *id002
        '500': *id003
  /files/.by.did/{dID}/attachments/data:
    post:
      tags:
      - Attachments
      summary: Add attachment to document by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                primaryFile:
                  type: string
                  format: binary
      responses:
        '201': &id007
          description: Created
        '400': *id001
        '401': *id002
        '500': *id003
  /files/.by.did/{dID}/workflow/.approve:
    post:
      tags:
      - Workflow
      summary: Approve workflow by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
  /files/.by.did/{dID}/workflow/.reject:
    post:
      tags:
      - Workflow
      summary: Reject workflow by dID
      parameters:
      - name: dID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
  /files/{dDocName}/{dID}/copyRevision:
    post:
      tags:
      - Files
      summary: Copy document revision
      description: Copy a document revision. (COPY_DOC_REVISION)
      parameters:
      - name: dDocName
        in: path
        required: true
        schema:
          type: string
      - name: dID
        in: path
        required: true
        schema:
          type: string
      responses:
        '201': *id007
        '400': *id001
        '401': *id002
        '500': *id003
  /folders/browse/:
    get:
      tags:
      - Folders
      summary: Browse root folder
      description: List the content and structure of the root (FLD_ROOT) folder. (FLD_BROWSE)
      parameters:
      - name: fldapp
        in: query
        required: false
        schema:
          type: string
      - name: doCombinedBrowse
        in: query
        required: false
        schema:
          type: boolean
      - name: foldersFirst
        in: query
        required: false
        schema:
          type: boolean
      - name: folderCount
        in: query
        required: false
        schema:
          type: integer
      - name: fileCount
        in: query
        required: false
        schema:
          type: integer
      - name: combinedCount
        in: query
        required: false
        schema:
          type: integer
      - name: doMarkFavorites
        in: query
        required: false
        schema:
          type: boolean
      - name: doMarkSubscribed
        in: query
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Folder contents
        '400': *id001
        '401': *id002
        '500': *id003
  /folders/files/{fFileGUID}/capabilities:
    get:
      tags:
      - Folders
      summary: Get file capabilities
      parameters:
      - name: fFileGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: File capabilities
        '400': *id001
        '401': *id002
        '500': *id003
  /workflows/{dWfName}/steps/{dWfStepName}:
    delete:
      tags:
      - Workflow
      summary: Delete workflow step
      description: Delete a workflow step. (DELETE_WORKFLOW_STEP)
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      - name: dWfStepName
        in: path
        required: true
        schema:
          type: string
      responses:
        '204': *id004
        '400': *id001
        '401': *id002
        '500': *id003
    put:
      tags:
      - Workflow
      summary: Update workflow step
      description: Edit a workflow step. (EDIT_WORKFLOW_STEP)
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      - name: dWfStepName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
  /workflows/{dWfName}/steps/{dWfStepName}/aliases:
    post:
      tags:
      - Workflow
      summary: Add user to workflow step
      description: Add a user alias to a workflow step. (WF_ADD_USER)
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      - name: dWfStepName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
  /workflows/{dWfName}/steps/{dWfStepName}/aliases/{dAlias}:
    post:
      tags:
      - Workflow
      summary: Delete user from workflow step
      description: Delete a user alias from a workflow step. (WF_REMOVE_USER)
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      - name: dWfStepName
        in: path
        required: true
        schema:
          type: string
      - name: dAlias
        in: path
        required: true
        schema:
          type: string
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
  /workflows/active/items:
    get:
      tags:
      - Workflow
      summary: List active workflows
      description: Get a list of active workflows. (GET_ACTIVE_WORKFLOWS)
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: List of active workflows
        '400': *id001
        '401': *id002
        '500': *id003
  /workflows/inqueue/items:
    get:
      tags:
      - Workflow
      summary: Get user's current workflow assignments
      description: Get the user's current workflow assignments. (GET_WORKFLOW_INQUEUE_LIST,
        GET_WORKFLOW_INQUEUE_LIST_EX)
      parameters:
      - name: fields
        in: query
        required: false
        schema:
          type: string
        description: Comma separated list of fields to be returned for each content
          item. By default, all fields will be returned.
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
        description: The sort field and sort order which will be used to arrange
          the filtered content items. For example, dwfQueueLastActionTs:Desc will
          sort the specified field in descending order.
      - name: limit
        in: query
        required: false
        schema:
          type: integer
        description: The maximum number of items listed per page. If not provided,
          the limit is calculated from the config setting WfInqueueMaxRows. If neither
          are set, the default is 20.
      - name: offset
        in: query
        required: false
        schema:
          type: integer
        description: Specifies the point from which items are listed for the response.
      - name: doMarkSubscribed
        in: query
        required: false
        schema:
          type: integer
        description: When 1 adds a fIsSubscribed field in the resultset to indicate
          if the folder is subscribed.
      responses:
        '200':
          description: Workflow in queue for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInQueueResponse'
        '204':
          description: The workflow in queue is empty
        '400': *id001
        '401': *id002
        '403':
          description: User is not allowed to take this action
        '500': *id003
  /taxonomies/:
    get:
      tags:
      - Taxonomies
      summary: List all taxonomies
      description: Get a list of all taxonomies. (GET_ALL_TAXONOMIES)
      responses:
        '200':
          description: List of taxonomies
        '400': *id001
        '401': *id002
        '500': *id003
  /taxonomies/{dTaxonomyGUID}/categories/:
    get:
      tags:
      - Taxonomies
      summary: Search categories in taxonomy
      description: Search categories within a taxonomy. (SEARCH_CATEGORIES)
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      - name: whereClause
        in: query
        required: false
        schema:
          type: string
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of categories
        '400': *id001
        '401': *id002
        '500': *id003
  /taxonomies/{dTaxonomyGUID}/categories/{dCategoryGUID}/:
    get:
      tags:
      - Taxonomies
      summary: Get category details
      description: Read a category. (GET_CATEGORY)
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      - name: dCategoryGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Category details
        '400': *id001
        '401': *id002
        '500': *id003
    put:
      tags:
      - Taxonomies
      summary: Update category
      description: Update a category. (UPDATE_CATEGORY)
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      - name: dCategoryGUID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
    delete:
      tags:
      - Taxonomies
      summary: Delete a category
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      - name: dCategoryGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Category deleted successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
  /taxonomies/{dTaxonomyGUID}/securityGroups/:
    get:
      tags:
      - Taxonomies
      summary: Get security groups associated with taxonomy
      description: Get the security groups associated with a taxonomy. (GET_TAXONOMY_SECURITY_GROUPS)
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: List of security groups
        '400': *id001
        '401': *id002
        '500': *id003
  /taxonomies/{dTaxonomyGUID}/securityGroups/.add:
    post:
      tags:
      - Taxonomies
      summary: Add security group to taxonomy
      description: Associate a taxonomy to a security group. (TAXONOMY_ADD_SECURITY_GROUP)
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dSecurityGroup:
                  type: string
              required:
              - dSecurityGroup
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
  /taxonomies/{dTaxonomyGUID}/securityGroups/.remove:
    post:
      tags:
      - Taxonomies
      summary: Remove security group from taxonomy
      description: Remove taxonomy from associated security group. (TAXONOMY_REMOVE_SECURITY_GROUP)
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dSecurityGroup:
                  type: string
              required:
              - dSecurityGroup
      responses:
        '200': *id006
        '400': *id001
        '401': *id002
        '500': *id003
  /system/securityGroups/{dSecurityGroup}/taxonomies:
    get:
      tags:
      - System
      summary: Get taxonomies for security group
      description: Get the associated taxonomies for a security group. (GET_SECURITY_GROUP_TAXONOMIES)
      parameters:
      - name: dSecurityGroup
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: List of taxonomies
        '400': *id001
        '401': *id002
        '500': *id003
  /folders:
    post:
      tags:
      - Folders
      summary: Create a folder or shortcut
      parameters:
      - name: fParentGUID
        in: query
        required: true
        schema:
          type: string
      - name: fFolderName
        in: query
        required: true
        schema:
          type: string
      - name: fTargetGUID
        in: query
        schema:
          type: string
      - name: ConflictResolutionMethod
        in: query
        schema:
          type: string
      - name: isForceInheritSecurityForFolderCreation
        in: query
        schema:
          type: boolean
      responses:
        '201':
          description: Folder created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict
        '500':
          description: Server error
  /taxonomies:
    post:
      tags:
      - Taxonomies
      summary: Create a taxonomy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxonomyCreateObject'
      responses:
        '201':
          description: Taxonomy created successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /taxonomies/{dTaxonomyGUID}/categories:
    post:
      tags:
      - Taxonomies
      summary: Create a category
      parameters:
      - name: dTaxonomyGUID
        in: path
        required: true
        schema:
          type: string
        description: Taxonomy GUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dCategoryName:
                  type: string
                  description: Category name
                dCategoryDescription:
                  type: string
                  description: Category description
                dParentCategoryGUID:
                  type: string
                  description: Parent category GUID (optional)
              required:
              - dCategoryName
      responses:
        '201':
          description: Category created successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
  /workflows/{dWfName}/steps:
    post:
      tags:
      - Workflow
      summary: Create a workflow step
      description: Create a workflow step for the workflow. (ADD_WORKFLOWSTEP)
      parameters:
      - name: dWfName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - dWfStepName
              - dWfStepDescription
              - dWfStepType
              - dAliases
              properties:
                dWfStepName:
                  type: string
                  description: The workflow step name
                dWfStepDescription:
                  type: string
                  description: The workflow step description
                dWfStepType:
                  type: string
                  description: The workflow step type (Review, Review/Edit Revision,
                    Review/New Revision, or step type codes)
                dWfStepIsAll:
                  type: boolean
                  description: When true, all users should approve
                dWfStepWeight:
                  type: integer
                  description: 'Number of reviewers required (default: 1)'
                wfEntryScript:
                  type: string
                  description: Step entry script (within <$ and $> delimiters)
                wfExitScript:
                  type: string
                  description: Step exit script (within <$ and $> delimiters)
                wfUpdateScript:
                  type: string
                  description: Step update script (within <$ and $> delimiters)
                dAliases:
                  type: string
                  description: Comma-delimited list of aliases and users (alias1,usertype1,alias2,usertype2)
      responses:
        '201':
          description: Successfully created a workflow step
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: User is not allowed to take this action
        '500':
          description: Server error
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: Basic Authentication with username and password
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication
  schemas:
    GeneralErrorResponse:
      type: object
      additionalProperties: true
    WorkInProgressResponse:
      type: object
      additionalProperties: true
    MetadataChangeObjectParameter:
      type: object
      additionalProperties: true
    CapabilitiesResponse:
      type: object
      additionalProperties: true
    SearchResponse:
      type: object
      additionalProperties: true
    PublicLinkObject:
      type: object
      additionalProperties: true
    PublicLinkResponse:
      type: object
      additionalProperties: true
    PublicLinkListResponse:
      type: object
      properties:
        count:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/PublicLinkResponse'
    ApplicationLinkObject:
      type: object
      additionalProperties: true
    ApplicationLinkResponse:
      type: object
      additionalProperties: true
    AppLinkRefreshObject:
      type: object
      additionalProperties: true
    BackgroundJobRequestObject:
      type: object
      additionalProperties: true
    BackgroundCategoryActionRequestObject:
      type: object
      additionalProperties: true
    BackgroundJobStatus:
      type: object
      additionalProperties: true
    DocProfileResponse:
      type: object
      additionalProperties: true
    DataSourceResponse:
      type: object
      additionalProperties: true
    DocTypeResponse:
      type: object
      additionalProperties: true
    DocConfigInfoResponse:
      type: object
      additionalProperties: true
    DocMetaInfoResponse:
      type: object
      additionalProperties: true
    TaxonomyCreateObject:
      type: object
      additionalProperties: true
    TaxonomyUpdateObject:
      type: object
      additionalProperties: true
    WorkflowListResponse:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of workflows
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowResponse'
    WorkflowInQueueResponse:
      type: object
      additionalProperties: true
      description: Response containing the user's current workflow assignments
    WorkflowResponse:
      type: object
      properties:
        workflowId:
          type: string
          description: Unique workflow identifier
        workflowName:
          type: string
          description: Name of the workflow
        workflowType:
          type: string
          description: Type of workflow
        status:
          type: string
          enum:
          - pending
          - approved
          - rejected
          - in_progress
          - completed
          description: Current workflow status
        createdBy:
          type: string
          description: User who created the workflow
        createdDate:
          type: string
          format: date-time
          description: Date when workflow was created
        lastModifiedDate:
          type: string
          format: date-time
          description: Date when workflow was last modified
        assignedTo:
          type: string
          description: User assigned to the workflow
        dueDate:
          type: string
          format: date-time
          description: Due date for workflow completion
        priority:
          type: string
          enum:
          - low
          - medium
          - high
          - urgent
          description: Workflow priority
        description:
          type: string
          description: Workflow description
        attachments:
          type: array
          items:
            type: string
          description: List of attachment IDs
    WorkflowCreateRequest:
      type: object
      required:
      - workflowName
      - workflowType
      - assignedTo
      properties:
        workflowName:
          type: string
          description: Name of the workflow
        workflowType:
          type: string
          description: Type of workflow
        assignedTo:
          type: string
          description: User to assign the workflow to
        dueDate:
          type: string
          format: date-time
          description: Due date for workflow completion
        priority:
          type: string
          enum:
          - low
          - medium
          - high
          - urgent
          default: medium
          description: Workflow priority
        description:
          type: string
          description: Workflow description
        attachments:
          type: array
          items:
            type: string
          description: List of attachment IDs
    WorkflowUpdateRequest:
      type: object
      properties:
        workflowName:
          type: string
          description: Name of the workflow
        status:
          type: string
          enum:
          - pending
          - approved
          - rejected
          - in_progress
          - completed
          description: Current workflow status
        assignedTo:
          type: string
          description: User assigned to the workflow
        dueDate:
          type: string
          format: date-time
          description: Due date for workflow completion
        priority:
          type: string
          enum:
          - low
          - medium
          - high
          - urgent
          description: Workflow priority
        description:
          type: string
          description: Workflow description
    AttachmentResponse:
      type: object
      properties:
        attachmentId:
          type: string
          description: Unique attachment identifier
        fileName:
          type: string
          description: Name of the attachment file
        fileSize:
          type: integer
          description: Size of the file in bytes
        contentType:
          type: string
          description: MIME type of the file
        attachmentType:
          type: string
          description: Type of attachment
        description:
          type: string
          description: Attachment description
        createdBy:
          type: string
          description: User who created the attachment
        createdDate:
          type: string
          format: date-time
          description: Date when attachment was created
        lastModifiedDate:
          type: string
          format: date-time
          description: Date when attachment was last modified
        dDocName:
          type: string
          description: Document name this attachment belongs to
        downloadUrl:
          type: string
          description: URL to download the attachment
    AttachmentListResponse:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of attachments
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentResponse'
